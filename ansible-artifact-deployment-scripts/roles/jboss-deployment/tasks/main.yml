---
    ################################################################################
    # PREREQUISITES
    # must exist with chown -Rf jbs1app:jbs1appq: /opt/deploy, /opt/tuc-prod, /opt/Canada
    ################################################################################

    ################################################################################
    # Check mandatory variables are defined
    ################################################################################
    - name: Check mandatory variables are defined
      assert:
        that:
          - projectName is defined
          - repoName is defined
          - rhodecodeUrl is defined
          - artifactoryRepository is defined
          - pomGroupIdAnsible is defined
          - pomAritfactIdAnsible is defined
          - pomVersionAnsible is defined
          - pomAritfactExtensionAnsible is defined
    ################################################################################
    # Remove Existing Application
    ################################################################################
    - name: Remove Ansible Tower repo workspace
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/ansible-tower-workspace/{{ repoName }}
        - "{{ deploy_home }}/{{ projectName }}"
    - name: Create Ansible Tower repo workspace
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /tmp/ansible-tower-workspace/{{ repoName }}
    #https://www.unixarena.com/2018/12/ansible-tower-awx-store-credential-custom-credentials-type.html/
    ################################################################################
    # Clone applicatioon repository
    ################################################################################
    - name: Clone application repo with rhodecode_password as new Credential Type
      shell: |
        cd /tmp/ansible-tower-workspace/{{ repoName }}
        ~/usr/bin/hg clone http://admin:"{{ RhodeCode_password }}"@"{{ rhodecodeUrl }}"
    ################################################################################
    # Extract groupId, artifactId, version from pom.xml / pipeline-configuration.yaml
    # https://webcache.googleusercontent.com/search?q=cache:W8wvMriZ-xAJ:https://rickosborne.org/blog/2019/01/extract-a-maven-module-version-with-xpath-and-ansible/+&cd=7&hl=en&ct=clnk&gl=ca
    ################################################################################
    - name: get pom version from pom.xml
      # command: pom{{ item }}=$(xmllint --xpath "/*[namespace-uri()='http://maven.apache.org/POM/4.0.0' and local-name()='project']/*[namespace-uri()='http://maven.apache.org/POM/4.0.0' and local-name()='{{ item }}']/text()" /tmp/hello-world-war/pom.xml)
      command: xmllint --xpath "/*[namespace-uri()='http://maven.apache.org/POM/4.0.0' and local-name()='project']/*[namespace-uri()='http://maven.apache.org/POM/4.0.0' and local-name()='version']/text()" /tmp/hello-world-war/pom.xml
      register: registerPomVersion
      when: pomVersionAnsible is not defined
    - debug:
        var: registerPomVersion.stdout
      when: pomVersionAnsible is not defined
    - name: assign variable pomVersion from pom.xml
      set_fact:
        pomVersion: "{{ registerPomVersion.stdout }}"
      when: pomVersionAnsible is not defined
    - name: assign variable pomVersion from extra-vars pomVersionAnsible
      set_fact:
        pomVersion: "{{ pomVersionAnsible }}"
      when: pomVersionAnsible is defined
    - name: assign variable pomGroupId from extra-vars pomGroupIdAnsible
      set_fact:
        pomGroupId: "{{ pomGroupIdAnsible }}"
      when: pomGroupIdAnsible is defined
    - name: assign variable pomAritfactId from extra-vars pomAritfactIdAnsible
      set_fact:
        pomAritfactId: "{{ pomAritfactIdAnsible }}"
      when: pomAritfactIdAnsible is defined
    - name: assign variable pomAritfactExtension from extra-vars pomAritfactExtensionAnsible
      set_fact:
        pomAritfactExtension: "{{ pomAritfactExtensionAnsible }}"
      when: pomAritfactExtensionAnsible is defined
    ################################################################################
    # Download artifact from repository
    # http://www.mydailytutorials.com/ansible-delete-multiple-files-directories-ansible/
    ################################################################################
    - name: Download deployment artifact from Artifactory
      maven_artifact:
        repository_url: "{{ artifactoryUrl }}/{{ artifactoryRepository }}"
        group_id: "{{ pomGroupId }}"
        artifact_id: "{{ pomAritfactId }}"
        version: "{{ pomVersion }}"
        extension: "{{ pomAritfactExtensionAnsible }}"
        dest: /tmp/ansible-tower-workspace/{{ repoName }}/{{ pomAritfactId }}-{{ pomVersion }}.{{ pomAritfactExtension }}
        # username: user
        # password: pass
    ################################################################################
    # Remove Application
    # can also remove init.d script in the future
    ################################################################################
    - name: Stop Application
      shell: |
        {{ jboss_home }}/bin/run-{{ projectName }}.sh stop
        # rm -rf {{ jboss_home }}/standalone-{{ projectName }}
      ignore_errors: true
    - name: Remove {{ jboss_home }}/standalone-{{ projectName }}
      file:
        path: "{{ jboss_home }}/standalone-{{ projectName }}"
        state: absent

    ################################################################################
    # Set up resources
    ################################################################################
    # - name: Set up resources
      # shell: |
        # {{ jboss_home }}/bin/jboss-cli.sh --file=/tmp/ansible-tower-workspace/{{ repoName }}/{{ repoName }}/deployment/application-jboss-resources.cli

    ################################################################################
    # Deploy
    ################################################################################
    - name: Create Application
      # jboss:
      # deploy_path: /usr/share/jboss-as/standalone/deployments/
      # src: /tmp/hello-world-war.war
      # deployment: hello-world-war.war
      # state: present
      shell: |
        # NOTE: {{ deploy_home }}/{{ projectName }} MUST NOT exist, it should be deleted above, otherwise the copy below will not correctly
        # rm -rf {{ deploy_home }}/{{ projectName }}
        cp -R /tmp/ansible-tower-workspace/{{ repoName }}/{{ repoName }}/deployment {{ deploy_home }}/{{ projectName }}
        cp /tmp/ansible-tower-workspace/{{ repoName }}/{{ pomAritfactId }}-{{ pomVersion }}.{{ pomAritfactExtensionAnsible }} {{ deploy_home }}/{{ projectName }}
        cd {{ deploy_home }}/{{ projectName }}
        chmod a+x *.sh
        ./deploy.sh

    ################################################################################
    # Acceptance Test
    ################################################################################
    - name: Check {{ deploy_home }}/{{ projectName }}/acceptance_test.sh exists
      stat:
        path: "{{ deploy_home }}/{{ projectName }}/acceptance_test.sh"
      register: stat_result
    - name: Acceptance Test
      shell: |
        {{ deploy_home }}/{{ projectName }}/acceptance_test.sh
      when: stat_result.stat.exists == True